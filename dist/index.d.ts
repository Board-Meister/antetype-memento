// Generated by dts-bundle-generator v9.5.1

import { IBaseDef, ICore, IParentDef, Modules, ModulesEvent } from '@boardmeister/antetype-core';
import { Herald, ISubscriber, Subscriptions } from '@boardmeister/herald';
import { IInjectable } from '@boardmeister/marshal';
import { Minstrel } from '@boardmeister/minstrel';

export type SaveCommand<T = unknown> = (original: IBaseDef | IParentDef, data: T) => void | Promise<void>;
export interface IRequiredModules extends Modules {
	core: ICore;
}
declare enum Event$1 {
	SAVE = "antetype.memento.save"
}
export interface IMementoState<T = unknown> {
	origin?: string;
	data?: T;
	layer: IBaseDef;
	undo: SaveCommand<T>;
	redo: SaveCommand<T>;
}
export interface SaveEvent<T = unknown> {
	state: IMementoState<T>[];
}
export interface IMementoParams {
	canvas: HTMLCanvasElement | null;
	modules: IRequiredModules;
	herald: Herald;
}
interface IInjected extends Record<string, object> {
	minstrel: Minstrel;
	herald: Herald;
}
export declare class Skeleton {
	#private;
	static inject: Record<string, string>;
	inject(injections: IInjected): void;
	register(event: CustomEvent<ModulesEvent>): Promise<void>;
	static subscriptions: Subscriptions;
}
declare const EnSkeleton: IInjectable<IInjected> & ISubscriber;

export {
	EnSkeleton as default,
	Event$1 as Event,
};

export {};
